} else if (day == "Saturday") {
num_day <- 7
}
num_day
grade <- function(score){
if(score < 60 | score == 60){
score <- "F"
} else if(score > 60 | score < 70 | score == 70){
score <- "D"
} else if(score > 70 | score < 80 | score == 80){
score <- "C"
} else if(score > 80 | score < 90 | score == 90){
score <- "B"
} else if(score > 90 | score < 100 | score == 100)
score <- "A"
}
# grade "A"
grade(score = 90)
# grade "B"
grade(score = 89.9999)
# grade "C"
grade(score = 70.0000001)
# grade "F"
grade(score = 50)
# grade "A"
grade(score = 90)
grade <- function(score){
if(score < 60 | score == 60){
print("F")
} else if(score > 60 | score < 70 | score == 70){
print("D")
} else if(score > 70 | score < 80 | score == 80){
print("C")
} else if(score > 80 | score < 90 | score == 90){
print("B")
} else if(score > 90 | score < 100 | score == 100)
print("A")
}
# grade "A"
grade(score = 90)
# grade "B"
grade(score = 89.9999)
# grade "C"
grade(score = 70.0000001)
# grade "F"
grade(score = 50)
grade <- function(score){
if(score < 60 | score == 60){
print("F")
} else if(score > 60 & score < 70 | score == 70){
print("D")
} else if(score > 70 & score < 80 | score == 80){
print("C")
} else if(score > 80 & score < 90 | score == 90){
print("B")
} else if(score > 90 & score < 100 | score == 100)
print("A")
}
# grade "A"
grade(score = 90)
# grade "B"
grade(score = 89.9999)
# grade "C"
grade(score = 70.0000001)
# grade "F"
grade(score = 50)
grade <- function(score){
if(score < 60){
print("F")
} else if(score > 60 & score < 70 | score == 60){
print("D")
} else if(score > 70 & score < 80 | score == 70){
print("C")
} else if(score > 80 & score < 90 | score == 80){
print("B")
} else if(score > 90 & score < 100 | score == 100 | score == 90)
print("A")
}
# grade "A"
grade(score = 90)
# grade "B"
grade(score = 89.9999)
# grade "C"
grade(score = 70.0000001)
# grade "F"
grade(score = 50)
#"score must be a number between 0 and 100"
#modify function
grade <- function(score){
if(score < 60){
print("F")
} else if(score > 60 & score < 70 | score == 60){
print("D")
} else if(score > 70 & score < 80 | score == 70){
print("C")
} else if(score > 80 & score < 90 | score == 80){
print("B")
} else if(score > 90 & score < 100 | score == 100 | score == 90){
print("A")
} else if(score < 0){
print("score must be a number between 0 and 100")
} else if(score > 100){
print(""score must be a number between 0 and 100"")
}
}
#"score must be a number between 0 and 100"
#modify function
grade <- function(score){
if(score < 60){
print("F")
} else if(score > 60 & score < 70 | score == 60){
print("D")
} else if(score > 70 & score < 80 | score == 70){
print("C")
} else if(score > 80 & score < 90 | score == 80){
print("B")
} else if(score > 90 & score < 100 | score == 100 | score == 90){
print("A")
} else if(score < 0){
print("score must be a number between 0 and 100")
} else if(score > 100){
print("score must be a number between 0 and 100")
}
}
grade(-100)
#"score must be a number between 0 and 100"
#modify function
grade <- function(score){
if(score < 60 & score > 0){
print("F")
} else if(score > 60 & score < 70 | score == 60){
print("D")
} else if(score > 70 & score < 80 | score == 70){
print("C")
} else if(score > 80 & score < 90 | score == 80){
print("B")
} else if(score > 90 & score < 100 | score == 100 | score == 90){
print("A")
} else if(score < 0){
print("score must be a number between 0 and 100")
} else if(score > 100){
print("score must be a number between 0 and 100")
}
}
grade(-100)
# Convert the day of the week into a number.
day <- "Tuesday" # Change this value!
switch(day, # The expression to be evaluated.
Sunday = 1,
Monday = 2,
Tuesday = 3,
Wednesday = 4,
Thursday = 5,
Friday = 6,
Saturday = 7,
NA) # an (optional) default value if there are no matches
# Convert a number into a day of the week.
day_num <- 3 # Change this value!
switch(day_num,
"Sunday",
"Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday")
#miles2inches()
miles2inches <- function(x = 1){
x * 63360
}
# miles2feet()
miles2feet <- function(x = 1){
x * 5280
}
#miles2inches()
miles2inches <- function(x = 1){
x * 63360
}
# miles2feet()
miles2feet <- function(x = 1){
x * 5280
}
# miles2yards()
miles2yards <- function(x = 1){
x * 1760
}
# miles2meters()
miles2meters <- function (x = 1){
x / 0.00062137
}
# miles2kms()
miles2kms <- function(x = 1){
x / 0.62137
}
miles2inches(2)
miles2feet(2)
miles2yards(2)
miles2meters(2)
miles2kms(2)
convert(40, to = "in")
convert <- function(x, to){
switch("in" = miles2inches(),
"ft" = miles2feet(),
"yd" = miles2yards(),
"m" = miles2meters(),
"km" = miles2kms())
}
convert(40, to = "in")
switch("in" = miles2inches(x),
"ft" = miles2feet(x),
"yd" = miles2yards(x),
"m" = miles2meters(x),
"km" = miles2kms(x))
convert <- function(x, to){
switch("in" = miles2inches(x),
"ft" = miles2feet(x),
"yd" = miles2yards(x),
"m" = miles2meters(x),
"km" = miles2kms(x))
}
convert(40, to = "in")
convert <- function(x, to){
switch(x,
"in" = miles2inches(x),
"ft" = miles2feet(x),
"yd" = miles2yards(x),
"m" = miles2meters(x),
"km" = miles2kms(x))
}
convert(40, to = "in")
convert(40, to = "in")
convert(40, to = "in")
convert <- function(x, to){
switch( "in" = miles2inches(x),
"ft" = miles2feet(x),
"yd" = miles2yards(x),
"m" = miles2meters(x),
"km" = miles2kms(x))
}
convert(40, to = "in")
convert <- function(x, to = "in"){
switch("in" = miles2inches(x),
"ft" = miles2feet(x),
"yd" = miles2yards(x),
"m" = miles2meters(x),
"km" = miles2kms(x))
}
convert(40, to = "in")
switch("in" = miles2inches(),
"ft" = miles2feet(),
"yd" = miles2yards(),
"m" = miles2meters(),
"km" = miles2kms())
convert <- function(x, to = "in"){
switch("in" = miles2inches(),
"ft" = miles2feet(),
"yd" = miles2yards(),
"m" = miles2meters(),
"km" = miles2kms())
}
convert(40, to = "in")
convert <- function(x, to){
switch("in" = miles2inches(),
"ft" = miles2feet(),
"yd" = miles2yards(),
"m" = miles2meters(),
"km" = miles2kms())
}
convert(40, to = "in")
convert <- function(x, to){
if (to = "in"){
switch(miles2inches())
} else if (to = "ft"){
switch(miles2feet())
}
if (to = "in"){
switch(miles2inches())
} else if (to = "ft"){
switch(miles2feet())
}
if (to = "in"){
switch(miles2inches())
} else if (to = "ft"){
switch(miles2feet())
}}
if (to = "in") {
switch(miles2inches())
}}
convert <- function(x, to){
if (to = "in")
switch(miles2inches())
}
if (to = "in"){
switch(miles2inches())}
convert <- function(x, to) {
switch (to,
in = miles2inches(x),
ft = miles2feet(x),
yd = miles2yards(x),
m = miles2meters(x),
km = miles2kms(x))
}
"
convert <- function(x, to) {
switch (to,
"in" = miles2inches(x),
"ft" = miles2feet(x),
"yd" = miles2yards(x),
"m" = miles2meters(x),
"km" = miles2kms(x))
}
convert(40, to = "in")
library(stats)
convert <- function(x, to) {
switch (to, in = miles2inches(x),
ft = miles2feet(x),
yd = miles2yards(x),
m = miles2meters(x),
km = miles2kms(x))
}
convert <- function(x, to) {
switch (to, miles2inches(x),
miles2feet(x),
miles2yards(x),
miles2meters(x),
miles2kms(x))
}
convert <- function(x, to) {
switch (to,
miles2inches(x),
miles2feet(x),
miles2yards(x),
miles2meters(x),
miles2kms(x))
}
convert <- function(x, to) {
switch (to,
miles2inches(x) = in,
miles2feet(x) = ,
miles2yards(x),
miles2meters(x),
miles2kms(x))
}
convert <- function(x, to) {
switch (to,
miles2inches(x),
miles2feet(x),
miles2yards(x),
miles2meters(x),
miles2kms(x))
}
convert(40, to = "in")
switch (to,
miles2inches(x) = inches,
miles2feet(x) = feet,
miles2yards(x) = yards,
miles2meters(x) = meters,
miles2kms(x) =kms)
switch(day, # The expression to be evaluated.
Sunday = 1,
Monday = 2,
Tuesday = 3,
Wednesday = 4,
Thursday = 5,
Friday = 6,
Saturday = 7,
NA)
switch(to,
in = miles2inches(x),
ft = miles2feet(x))
switch(to,
ft = miles2feet(x))
switch(to,
ft = miles2feet(x))}
function(x, to){
switch(to,
ft = miles2feet(x))
}
function(x, to){
switch(to,
ft = miles2feet(x),
yd = miles2yards(x))
}
function(x, to){
switch(to,
in = miles2inches(x),
ft = miles2feet(x),
yd = miles2yards(x))
}
function(x, to){
switch(to,
ft = miles2feet(x),
yd = miles2yards(x),
m = miles2meters(x),
kmx = miles2kms(x))
}
convert(40, to = "in")
convert(40, to = "kms")
convert(40, to = "kms")
function(x, to){
switch(to,
ft = miles2feet(x),
yd = miles2yards(x),
m = miles2meters(x),
kmx = miles2kms(x))
}
convert <- function(x, to){
switch(to,
ft = miles2feet(x),
yd = miles2yards(x),
m = miles2meters(x),
kms = miles2kms(x))
}
convert(40, to = "kms")
convert <- function(x, to){
switch(to,
in = miles2inches(x),
ft = miles2feet(x),
yd = miles2yards(x),
m = miles2meters(x),
kms = miles2kms(x))
}
convert(40, to = "inches")
convert <- function(x, to){
switch(to,
inches = miles2inches(x),
ft = miles2feet(x),
yd = miles2yards(x),
m = miles2meters(x),
kms = miles2kms(x))
}
convert(40, to = "inches")
convert <- function(x, to = "km"){
switch(to,
inches = miles2inches(x),
ft = miles2feet(x),
yd = miles2yards(x),
m = miles2meters(x),
kms = miles2kms(x))
}
convert(40, to = "inches")
convert(3, "in")
convert(3, "ft")
convert(3, "yd")
convert(3, "m")
convert(3, "km")
convert(3, "inches")
convert(3, "ft")
convert(3, "yd")
convert(3, "m")
convert(3, "km")
convert(3, "inches")
convert(3, "ft")
convert(3, "yd")
convert(3, "m")
convert(3, "km")
convert(3, "inches")
convert(3, "ft")
convert(3, "yd")
convert(3, "m")
convert(3, "km")
convert(3, "inches")
convert(3, "ft")
convert(3, "yd")
convert(3, "m")
convert(3, "km")
convert(3, "km")
convert <- function(x, to = "km"){
switch(to,
inches = miles2inches(x),
ft = miles2feet(x),
yd = miles2yards(x),
m = miles2meters(x),
kms = miles2kms(x))
}
convert(40, to = "inches")
convert(3, "inches")
convert(3, "ft")
convert(3, "yd")
convert(3, "m")
convert(3, "km")
convert(3, "inches")
convert(3, "ft")
convert(3, "yd")
convert(3, "m")
convert(3, "km")
convert(3, "kms")
knitr::opts_chunk$set(echo = TRUE)
vec <- c(3, 1, 4)
vec + 1
vec[1] + 1
vec[2] + 1
vec[3] + 1
vec <- c(3, 1, 4)
for (j in 1:3) {
print(vec[j] + 1)
}
vec <- c(3, 1, 4) # Change this value!
for (j in c()) { # Replace c() with an appropriate sequence.
# Fill in.
}
sibility:
vec <- c(3, 1, 4)  # Change this value!
vec <- c(3, 1, 4)  # Change this value!
vec2 <- rep(0, length(vec))  # "empty" of zeros vector to be filled in the loop
for (i in c()) {# Replace c() with an appropriate sequence.
# Fill in.
}
install.packages("testthat")
install.packages("testthat")
install.packages("testthat")
install.packages("testthat")

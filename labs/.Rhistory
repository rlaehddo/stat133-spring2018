getwd(Users/akii_my/Desktop/school/stat133/labs)
setwd("~/Desktop/school/stat133/labs")
P(red) = P(red | bag1) P(bag1) + P(red | bag2) P(bag2)
# bags
bag1 <- c('white', 'white', 'red')
bag2 <- c(rep('white', 3), 'red')
bags <- c('bag1', 'bag2')
repetitions <- 1000
drawn_balls <- character(repetitions)
set.seed(345)
for (i in 1:repetitions) {
# select one bag
chosen_bag <- sample(bags, 1)
# draw a ball from chosen bag
if (chosen_bag == 'bag1') {
drawn_balls[i] <- sample(bag1, 1)
} else {
drawn_balls[i] <- sample(bag2, 1)
}
}
table(drawn_balls) / repetitions
# bags
bag1 <- c('white', 'white', 'red')
bag2 <- c(rep('white', 3), 'red')
bags <- c('bag1', 'bag2')
repetitions <- 1000
drawn_balls <- character(repetitions)
set.seed(345)
for (i in 1:repetitions) {
# select one bag
chosen_bag <- sample(bags, 1)
# draw a ball from chosen bag
if (chosen_bag == 'bag1') {
drawn_balls[i] <- sample(bag1, 1)
} else {
drawn_balls[i] <- sample(bag2, 1)
}
}
table(drawn_balls) / repetitions
```{r}
# boxes as character vectors
box1 <- c('blue', 'blue', 'red')
box2 <- c('blue', 'blue', 'red', 'red', 'red', 'white')
# bags
bag1 <- c('white', 'white', 'red')
library(ggplot2)
# sample size
size <- 4
# number of repetitions
repetitions <- 1000
# number of repetitions
repetitions <- 1000
# matrix to store sample results
drawn_balls <- matrix("", repetitions, size)
for (r in 1:repetitions) {
aux <- runif(1)
if (aux > 0.5) {
drawn_balls[r, ] <- sample(box1, size, replace = TRUE)
} else {
drawn_balls[r,] <- sample(box2, size)
}
}
bags <- c('bag1', 'bag2')
repetitions <- 1000
drawn_balls <- character(repetitions)
set.seed(345)
for (i in 1:repetitions) {
# select one bag
chosen_bag <- sample(bags, 1)
# draw a ball from chosen bag
if (chosen_bag == 'bag1') {
drawn_balls[i] <- sample(bag1, 1)
} else {
drawn_balls[i] <- sample(bag2, 1)
}
}
table(drawn_balls) / repetitions
# boxes as character vectors
box1 <- c('blue', 'blue', 'red')
box2 <- c('blue', 'blue', 'red', 'red', 'red', 'white')
# sample size
size <- 4
# number of repetitions
repetitions <- 1000
# matrix to store sample results
drawn_balls <- matrix("", repetitions, size)
for (r in 1:repetitions) {
aux <- runif(1)
if (aux > 0.5) {
drawn_balls[r, ] <- sample(box1, size, replace = TRUE)
} else {
drawn_balls[r,] <- sample(box2, size)
}
}
runif(1)
runif(1)
# sample size
size <- 4
# number of repetitions
repetitions <- 1000
# matrix to store sample results
drawn_balls <- matrix("", repetitions, size)
for (r in 1:repetitions) {
aux <- runif(1)
if (aux > 0.5) {
drawn_balls[r, ] <- sample(box1, size, replace = TRUE)
} else {
drawn_balls[r,] <- sample(box2, size)
}
}
drawn_balls
head(drawn_balls)
drawn_balls[1:4]
head(drawn_balls)
runif(1)
runif(1)
size = 4
if (aux > 0.5) {
drawn_balls[r, ] <- sample(box1, size, replace = TRUE)
} else {
drawn_balls[r,] <- sample(box2, size)
}
# sample size
size <- 4
# number of repetitions
repetitions <- 1000
# matrix to store sample results
drawn_balls <- matrix("", repetitions, size)
for (r in 1:repetitions) {
aux <- runif(1)
if (aux > 0.5) {
drawn_balls[r, ] <- sample(box1, size, replace = TRUE)
} else {
drawn_balls[r,] <- sample(box2, size)
}
}
head(drawn_balls)
# number of blue balls in each repetition
blue_counts <- apply(drawn_balls, 1, function(x) sum(x == 'blue'))
# relative frequencies
table(blue_counts) / repetitions
# progression of relative frequencies
blue_freqs <- vector(mode = "list", length = 5)
for (num_blue in 0:4) {
blue_f reqs[[num_blue + 1]] <- cumsum(blue_counts == num_blue) / (1:repetitions)
# number of blue balls in each repetition
blue_counts <- apply(drawn_balls, 1, function(x) sum(x == 'blue'))
# relative frequencies
table(blue_counts) / repetitions
# progression of relative frequencies
blue_freqs <- vector(mode = "list", length = 5)
for (num_blue in 0:4) {
blue_freqs[[num_blue + 1]] <- cumsum(blue_counts == num_blue) / (1:repetitions)
}
dat <- data.frame(
reps = rep(1:repetitions, 5),
freqs = unlist(blue_freqs),
number = factor(rep(0:4, each = repetitions))
)
ggplot(data = dat, aes(x = reps, y = freqs, group = number)) +
geom_path(aes(color = number)) +
ggtitle("Relative frequencies of number of blue balls")
length(drawnballs == 0)
sample
sample(drawn_balls)
length(drawn_balls == "blue")
blue_counts
table(blue_counts) / repetitions
# progression of relative frequencies
blue_freqs <- vector(mode = "list", length = 5)
for (num_blue in 0:4) {
blue_freqs[[num_blue + 1]] <- cumsum(blue_counts == num_blue) / (1:repetitions)
}
dat <- data.frame(
reps = rep(1:repetitions, 5),
freqs = unlist(blue_freqs),
number = factor(rep(0:4, each = repetitions))
)
ggplot(data = dat, aes(x = reps, y = freqs, group = number)) +
geom_path(aes(color = number)) +
ggtitle("Relative frequencies of number of blue balls")
shiny::runApp('lab11/lab11')
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
library(htmltools)
shiny::runApp('lab11/lab11')
install.packages("XML")
library(shiny)
runApp('lab11/lab11')
runApp('lab11/lab11')
runApp('lab11/lab11')
runApp('lab11/lab11')
?seq()
input
freqs
unlist(blue_freqs)
runApp('lab11/lab11')
knitr::opts_chunk$set(echo = TRUE)
size = 4
if (aux > 0.5) {
drawn_balls[r, ] <- sample(box1, size, replace = TRUE)
} else {
drawn_balls[r,] <- sample(box2, size)
}
runApp('lab11/lab11')
runApp('lab11/lab11')
runApp('lab11/lab11')
runApp('lab11/lab11')
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
library(XML)
library(xml2)
library(rvest)
library(magrittr)
readHTMLTable(XML)
readHTMLTable()
readHTMLTable(https://www.basketball-reference.com/teams/GSW/2017.html)
readHTMLTable(www.basketball-reference.com/teams/GSW/2017.html)
readHTMLTable("https://www.basketball-reference.com/teams/GSW/2017.html")
# Assemble url (so it fits on screen)
basket <- "https://www.basketball-reference.com"
gsw <- "/teams/GSW/2017.html"
gsw_url <- paste0(basket, gsw)
# download HTML file to your working directory
download.file(gsw_url, 'gsw-roster-2017.html')
# Read GSW Roster html table
gsw_roster <- readHTMLTable('gsw-roster-2017.html')
gsw_roster
summary(gsw_roster)
head(gsw_roster)
head(gsw_roster)
summary(gsw_roster)
library(XML)
library(xml2)
library(rvest)
library(magrittr)
# Assemble url (so it fits on screen)
basket <- "https://www.basketball-reference.com"
gsw <- "/teams/GSW/2017.html"
gsw_url <- paste0(basket, gsw)
# download HTML file to your working directory
download.file(gsw_url, 'gsw-roster-2017.html')
# Read GSW Roster html table
gsw_roster <- readHTMLTable('gsw-roster-2017.html')
head(gsw_roster)
summary(gsw_roster)
gsw_roster
gsw_roster$roster
nba_html <- paste0(basket, "/leagues/NBA_2017.html")
xml_doc <- read_html(nba_html)
xml_text <- xml_doc %>% html_text()
# content of h2 nodes
xml_doc %>%
html_nodes("h2") %>%
html_text()
# node with an attribute
xml_doc %>%
html_nodes("p.listhead") %>%
html_text()
xml_doc %>%
html_nodes(xpath = '//p[@class="listhead"]') %>%
html_text()
# content of h2 nodes
xml_doc %>%
html_nodes("h2") %>%
html_text()
xml_doc %>%
html_nodes("h1") %>%
html_text()
#strong
xml_doc %>%
html_nodes("strong") %>%
html_text()
#button
xml_doc %>%
html_nodes("button") %>%
html_text()
#button
xml_doc %>%
html_nodes("button") %>%
html_text()
knitr::opts_chunk$set(echo = TRUE)
library(XML)
library(xml2)
library(rvest)
library(magrittr)
# Assemble url (so it fits on screen)
basket <- "https://www.basketball-reference.com"
gsw <- "/teams/GSW/2017.html"
gsw_url <- paste0(basket, gsw)
# download HTML file to your working directory
download.file(gsw_url, 'gsw-roster-2017.html')
# Read GSW Roster html table
gsw_roster <- readHTMLTable('gsw-roster-2017.html')
gsw_roster$roster
# Assemble url (so it fits on screen)
basket <- "https://www.basketball-reference.com"
bos <- "/teams/BOS/2017.html"
bos_url <- paste0(basket, bos)
# download HTML file to your working directory
download.file(bos_url, 'bos-roster-2017.html')
# Read BOS Roster html table
bos_roster <- readHTMLTable('bos-roster-2017.html')
nba_html <- paste0(basket, "/leagues/NBA_2017.html")
xml_doc <- read_html(nba_html)
xml_text <- xml_doc %>% html_text()
# content of h2 nodes
xml_doc %>%
html_nodes("h2") %>%
html_text()
#h1
xml_doc %>%
html_nodes("h1") %>%
html_text()
#strong
xml_doc %>%
html_nodes("strong") %>%
html_text()
#button
xml_doc %>%
html_nodes("button") %>%
html_text()
# node with an attribute
xml_doc %>%
html_nodes("p.listhead") %>%
html_text()
xml_doc %>%
html_nodes(xpath = '//p[@class="listhead"]') %>%
html_text()
xml_doc %>%
html_nodes(xpath = '//ul[@class=""]/li/a') %>%
html_text()
xml_doc %>%
html_nodes(xpath = '//ul[@class=""]//a') %>%
html_text()
# extracting first table
xml_table1 <- xml_doc %>%
html_nodes("table") %>%
extract(1)
class(xml_table1)
tbl1 <- html_table(xml_table1)
head(tbl1)
# extracting second table
xml_table2 <- xml_doc %>%
html_nodes("table") %>%
extract(2)
# two html tables
xml_tables <- xml_doc %>%
html_nodes("table") %>%
extract(1:2)
# extract names of teams
xml_tables %>%
html_nodes("a") %>%
html_text()
# href attributes
xml_tables %>%
html_nodes("a") %>%
html_attr("href")
xml_tables %>%
html_nodes("a") %>%
html_attr("href")
hrefs <- xml_tables %>%
html_nodes("a") %>%
html_attr("href")
hrefs
# two html tables
xml_tables <- xml_doc %>%
html_nodes("table") %>%
extract(1:2)
# extracting second table
xml_table2 <- xml_doc %>%
html_nodes("table") %>%
extract(2)
xml_tables
class(hrefs)
hrefs
str_sub(hrefs, -20, -10)
library(stringr)
library(dplyr)
str_sub(hrefs, -20, -10)
str_sub(hrefs, -20, -11)
str_sub(hrefs, -14, -11)
str_sub(hrefs, -15, -11)
str_sub(hrefs, -3, -11)
str_sub(hrefs, -13, -11)
abbreviations <- str_sub(hrefs, -13, -11)
str_sub(hrefs, -13, -5)
str_sub(hrefs, -13, -3)
str_replace(hrefs, pattern = '/', replacement = '-')
hrefs %>%
str_sub(-13)
hrefs %>%
str_sub(-13) %>%
str_replace(hrefs, pattern = '/', replacement = '-')
hrefs %>%
str_sub(-13) %>%
str_replace(pattern = '/', replacement = '-')
hrefs %>%
str_sub(-13) %>%
str_replace(pattern = '/', replacement = '-') %>%
str_replace(pattern = 'html', replacement = 'csv')
hrefs %>%
str_sub(-13) %>%
str_replace(pattern = '/', replacement = '-roster-') %>%
str_replace(pattern = 'html', replacement = 'csv')
csv <- hrefs %>%
str_sub(-13) %>%
str_replace(pattern = '/', replacement = '-roster-') %>%
str_replace(pattern = 'html', replacement = 'csv')
# modify with `hrefs[1]`
basket <- "https://www.basketball-reference.com"
gsw <- "/teams/GSW/2017.html"
gsw_url <- paste0(basket, gsw)
# first team
team_url <- paste0(basket, hrefs[1])
# roster table(as a data frame)
roster <- read_html(team_url) %>%
html_nodes("table") %>%
html_table()
# exporting first csv file
write.csv(roster[[1]], files[1])
# roster table(as a data frame)
roster <- read_html(team_url) %>%
html_nodes("table") %>%
html_table()
# exporting first csv file
write.csv(roster[[1]], files[1])
# for loop for all roster tables
for (i in 1:length(teams)) {
# assemble url
team_url <- paste0(basket, hrefs[i])
# get roster (data frame)
roster <- read_html(team_url) %>%
html_nodes("table") %>%
html_table()
# export table
write.csv(roster[[1]], files[i])
}
# modify with `hrefs[1]`
basket <- "https://www.basketball-reference.com"
gsw <- "/teams/GSW/2017.html"
gsw_url <- paste0(basket, gsw)
# first team
team_url <- paste0(basket, hrefs[1])
team_url
# vector of csv file names
files <- paste0(teams, '-roster-2017.csv')
library(dplyr)
library(stringr)
abbreviations <- str_sub(hrefs, -13, -11)
# vector of team abbreviations
teams <- str_sub(hrefs, 8, 10)
csv <- hrefs %>%
str_sub(-13) %>%
str_replace(pattern = '/', replacement = '-roster-') %>%
str_replace(pattern = 'html', replacement = 'csv')
# vector of csv file names
files <- paste0(teams, '-roster-2017.csv')
# modify with `hrefs[1]`
basket <- "https://www.basketball-reference.com"
gsw <- "/teams/GSW/2017.html"
gsw_url <- paste0(basket, gsw)
# first team
team_url <- paste0(basket, hrefs[1])
# roster table(as a data frame)
roster <- read_html(team_url) %>%
html_nodes("table") %>%
html_table()
# exporting first csv file
write.csv(roster[[1]], files[1])
# for loop for all roster tables
for (i in 1:length(teams)) {
# assemble url
team_url <- paste0(basket, hrefs[i])
# get roster (data frame)
roster <- read_html(team_url) %>%
html_nodes("table") %>%
html_table()
# export table
write.csv(roster[[1]], files[i])
}
library(shiny)
runApp('lab11/lab11')
runApp('lab11/lab11')
runApp('lab11/lab11')
# progression of relative frequencies
blue_freqs <- vector(mode = "list", length = 5)
for (num_blue in 0:4) {
blue_freqs[[num_blue + 1]] <- cumsum(blue_counts == num_blue) / (1:repetitions)
}
dat <- data.frame(
reps = rep(1:repetitions, 5),
freqs = unlist(blue_freqs),
number = factor(rep(0:4, each = repetitions))
)
ggplot(data = dat, aes(x = reps, y = freqs, group = number)) +
geom_path(aes(color = number)) +
ggtitle("Relative frequencies of number of blue balls")
runApp('lab11/lab11')
runApp('lab11/lab11')
runApp('lab11/lab11')
runApp('lab11/lab11')
runApp('lab11/lab11')
runApp('lab11/lab11')
runApp('lab11/lab11')
blue_freqs
runApp('lab11/lab11')
runApp('lab11/lab11')
dat
